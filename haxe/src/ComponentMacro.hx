#if macro
import haxe.io.Path;
import haxe.macro.Compiler;
import haxe.macro.Context;

class ComponentMacro {
    static function use() {
        Context.onGenerate(function(types) {
            var out = Compiler.getOutput();
            var outDir = Path.directory(out) + "/components";
            var relPath = "../" + Path.withoutDirectory(out);
            sys.FileSystem.createDirectory(outDir);
            for (type in types) {
                switch (type) {
                    case TInst(_.get() => cl = {superClass: {t: _.get() => {pack: [], name: "Component"}}}, _):
                        var name = cl.name;
                        cl.meta.add(":expose", [], cl.pos);
                        var src = '-- autogenerated by Haxe, DO NOT EDIT (original source: ${cl.pos})
require "haxe.out.main"

local comp = $name.new()

function init(self)
    comp:init(self)
end

function update(self, dt)
    comp:update(self, dt)
end

function final(self)
    comp:final(self)
end

function on_input(self, action_id, action)
    comp:on_input(self, action_id, action)
end

function on_message(self, message_id, message, sender)
    comp:on_message(self, message_id, message, sender)
end
                        ';
                        sys.io.File.saveContent('$outDir/$name.script', src);
                    default:
                }
            }
        });
    }
}
#end